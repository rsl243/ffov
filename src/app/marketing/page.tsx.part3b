  // Rendu pour les paniers abandonnés
  const renderAbandonedCarts = () => {
    return (
      <div className="p-6">
        <div className="flex flex-col md:flex-row justify-between mb-6">
          <div>
            <h2 className="text-xl font-semibold">Paniers abandonnés</h2>
            <p className="text-gray-500 mt-1">Récupérez vos ventes perdues</p>
          </div>
          
          <div className="flex flex-wrap gap-2 mt-4 md:mt-0">
            <div className="relative">
              <FiSearch className="absolute left-3 top-3 text-gray-400" />
              <Input
                type="text"
                placeholder="Rechercher un client..."
                className="pl-10 w-full md:w-60"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            
            <Button variant="outline" onClick={() => setShowExportModal(true)}>
              <FiDownload className="mr-2" />
              Exporter
            </Button>
          </div>
        </div>
        
        {/* Liste des paniers abandonnés */}
        {loading.carts ? (
          <div className="grid grid-cols-1 gap-4">
            {Array(3).fill(0).map((_, index) => (
              <Card key={index} className="animate-pulse">
                <CardContent className="p-6">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="h-5 bg-gray-200 rounded w-1/3 mb-2"></div>
                      <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
                      <div className="space-y-2">
                        {Array(2).fill(0).map((_, i) => (
                          <div key={i} className="h-4 bg-gray-200 rounded w-3/4"></div>
                        ))}
                      </div>
                    </div>
                    <div className="h-10 bg-gray-200 rounded w-20"></div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : filteredCarts.length === 0 ? (
          <div className="text-center py-10">
            <FiShoppingCart className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">Aucun panier abandonné</h3>
            <p className="mt-1 text-sm text-gray-500">
              Tous vos clients ont complété leurs achats, félicitations!
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-4">
            {filteredCarts.map((cart) => (
              <Card key={cart.id} className="overflow-hidden">
                <CardContent className="p-4">
                  <div className="flex flex-col md:flex-row justify-between">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <h3 className="font-medium">{cart.customer.name}</h3>
                        <Badge className="ml-2" variant="outline">
                          {cart.emailSent ? "Email envoyé" : "Non récupéré"}
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-500">{cart.customer.email}</p>
                      <p className="text-sm text-gray-500 mt-1">
                        <FiClock className="inline mr-1" />
                        Abandonné depuis: {cart.abandonedSince}
                      </p>
                      
                      <div className="mt-4">
                        <h4 className="text-sm font-medium mb-2">Produits dans le panier:</h4>
                        <ul className="space-y-1">
                          {cart.items.map((item, index) => (
                            <li key={index} className="text-sm">
                              {item.quantity}x {item.name} - {formatCurrency(item.price * item.quantity)}
                            </li>
                          ))}
                        </ul>
                        <p className="mt-2 text-base font-medium">
                          Total: {formatCurrency(cart.totalValue)}
                        </p>
                      </div>
                    </div>
                    
                    <div className="mt-4 md:mt-0 md:ml-4 flex md:flex-col justify-end">
                      <Button
                        variant="default"
                        className="w-full"
                        onClick={() => handleOpenPromo(cart)}
                        disabled={cart.emailSent}
                      >
                        <FiMail className="mr-2" />
                        {cart.emailSent ? "Offre envoyée" : "Envoyer une offre"}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    );
  };
  
  // Rendu pour la modale de promotion
  const renderPromoModal = () => {
    if (!showPromoModal || !selectedCart) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <Card className="w-full max-w-xl max-h-[90vh] overflow-y-auto">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>Envoyer une offre promotionnelle</CardTitle>
              <Button variant="ghost" size="icon" onClick={() => setShowPromoModal(false)}>
                <FiX />
              </Button>
            </div>
            <CardDescription>
              Envoyer une promotion à {selectedCart.customer.name} pour récupérer le panier abandonné
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Code promo</label>
              <Input
                value={promoData.code}
                onChange={(e) => setPromoData(prev => ({ ...prev, code: e.target.value }))}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Réduction (%)</label>
              <Input
                type="number"
                min="5"
                max="50"
                value={promoData.reduction}
                onChange={(e) => setPromoData(prev => ({ ...prev, reduction: parseInt(e.target.value) || 10 }))}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Date d'expiration</label>
              <Input
                type="date"
                value={promoData.dateExpiration}
                onChange={(e) => setPromoData(prev => ({ ...prev, dateExpiration: e.target.value }))}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Message</label>
              <textarea
                className="w-full min-h-[150px] p-2 border border-gray-300 rounded-md"
                value={promoData.message}
                onChange={(e) => setPromoData(prev => ({ ...prev, message: e.target.value }))}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button variant="outline" onClick={() => setShowPromoModal(false)}>
              Annuler
            </Button>
            <Button onClick={handleSendPromo}>
              <FiMail className="mr-2" />
              Envoyer l'offre
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  };
