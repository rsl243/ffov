  // Rendu pour l'analyse des clients
  const renderCustomerAnalytics = () => {
    return (
      <div className="p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold">Analyse des clients</h2>
          <p className="text-gray-500 mt-1">Comprendre votre clientèle pour mieux l'atteindre</p>
        </div>
        
        {loading.analytics ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {Array(4).fill(0).map((_, index) => (
              <Card key={index} className="animate-pulse">
                <CardHeader className="pb-2">
                  <div className="h-5 bg-gray-200 rounded w-1/3 mb-2"></div>
                </CardHeader>
                <CardContent>
                  <div className="h-40 bg-gray-200 rounded-md"></div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <>
            {/* Stats générales */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Card>
                <CardContent className="p-4">
                  <div className="flex flex-col items-center">
                    <FiUsers className="text-blue-500 text-2xl mb-2" />
                    <h3 className="text-sm font-medium text-gray-500">Total clients</h3>
                    <p className="text-2xl font-bold">{formatNumber(marketingData.customerAnalytics.totalCustomers)}</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <div className="flex flex-col items-center">
                    <FiUserPlus className="text-green-500 text-2xl mb-2" />
                    <h3 className="text-sm font-medium text-gray-500">Nouveaux ce mois</h3>
                    <p className="text-2xl font-bold">{formatNumber(marketingData.customerAnalytics.newCustomersThisMonth)}</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <div className="flex flex-col items-center">
                    <FiRefreshCw className="text-yellow-500 text-2xl mb-2" />
                    <h3 className="text-sm font-medium text-gray-500">Taux de fidélité</h3>
                    <p className="text-2xl font-bold">{formatPercent(marketingData.customerAnalytics.repeatPurchaseRate)}</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <div className="flex flex-col items-center">
                    <FiShoppingBag className="text-purple-500 text-2xl mb-2" />
                    <h3 className="text-sm font-medium text-gray-500">Panier moyen</h3>
                    <p className="text-2xl font-bold">{formatCurrency(marketingData.customerAnalytics.averageOrderValue)}</p>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            {/* Graphiques */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Sources d'acquisition */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-base">Sources d'acquisition</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64 overflow-y-auto">
                    {marketingData.customerAnalytics.topSources.map((source, index) => (
                      <div key={index} className="mb-3">
                        <div className="flex justify-between text-sm mb-1">
                          <span>{source.name}</span>
                          <span className="font-medium">{source.percentage}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2.5">
                          <div 
                            className="bg-blue-600 h-2.5 rounded-full" 
                            style={{ width: `${source.percentage}%` }}
                          ></div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              {/* Répartition géographique */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-base">Répartition géographique</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64 overflow-y-auto">
                    {marketingData.customerAnalytics.topCities.map((city, index) => (
                      <div key={index} className="mb-3">
                        <div className="flex justify-between text-sm mb-1">
                          <span>{city.name}</span>
                          <span className="font-medium">{city.percentage}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2.5">
                          <div 
                            className="bg-green-600 h-2.5 rounded-full" 
                            style={{ width: `${city.percentage}%` }}
                          ></div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              {/* Répartition par genre */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-base">Répartition par genre</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-around p-4">
                    {marketingData.customerAnalytics.demographicData.gender.map((item, index) => {
                      const total = marketingData.customerAnalytics.demographicData.gender.reduce(
                        (sum, curr) => sum + curr.value, 0
                      );
                      const percentage = total ? (item.value / total) * 100 : 0;
                      
                      return (
                        <div key={index} className="text-center">
                          <div 
                            className={`h-32 w-32 rounded-full flex items-center justify-center text-white font-bold text-xl ${
                              item.name === 'Hommes' ? 'bg-blue-500' : 'bg-pink-500'
                            }`}
                          >
                            {Math.round(percentage)}%
                          </div>
                          <p className="mt-2 font-medium">{item.name}</p>
                          <p className="text-sm text-gray-500">{formatNumber(item.value)} clients</p>
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
              
              {/* Répartition par âge */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-base">Répartition par âge</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64 overflow-y-auto">
                    {marketingData.customerAnalytics.demographicData.ageRanges.map((range, index) => (
                      <div key={index} className="mb-3">
                        <div className="flex justify-between text-sm mb-1">
                          <span>{range.range}</span>
                          <span className="font-medium">{range.percentage}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2.5">
                          <div 
                            className="bg-purple-600 h-2.5 rounded-full" 
                            style={{ width: `${range.percentage}%` }}
                          ></div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </>
        )}
      </div>
    );
  };
  
  // Rendu pour la modale d'exportation
  const renderExportModal = () => {
    if (!showExportModal) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>Exporter les données</CardTitle>
              <Button variant="ghost" size="icon" onClick={() => setShowExportModal(false)}>
                <FiX />
              </Button>
            </div>
            <CardDescription>
              Choisissez le format d'exportation souhaité
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-col space-y-2">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="h-4 w-4 text-blue-600"
                  checked={exportFormat === 'csv'}
                  onChange={() => setExportFormat('csv')}
                />
                <span className="ml-2 flex items-center">
                  <FiFileText className="mr-2" />
                  CSV
                </span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="h-4 w-4 text-blue-600"
                  checked={exportFormat === 'excel'}
                  onChange={() => setExportFormat('excel')}
                />
                <span className="ml-2 flex items-center">
                  <FiFileText className="mr-2" />
                  Excel
                </span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="h-4 w-4 text-blue-600"
                  checked={exportFormat === 'pdf'}
                  onChange={() => setExportFormat('pdf')}
                />
                <span className="ml-2 flex items-center">
                  <FiFileText className="mr-2" />
                  PDF
                </span>
              </label>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button variant="outline" onClick={() => setShowExportModal(false)}>
              Annuler
            </Button>
            <Button onClick={handleExportData}>
              <FiDownload className="mr-2" />
              Exporter
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  };
  
  return (
    <>
      {/* En-tête de la page */}
      <PageHeader title="Marketing" />
      
      {/* Contenu principal */}
      <Tabs defaultValue="products" value={activeTab} onValueChange={(value) => setActiveTab(value as any)} className="w-full">
        <TabsList className="w-full justify-start border-b bg-transparent p-0">
          <TabsTrigger
            value="products"
            className="px-6 py-3 text-sm font-medium data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 rounded-none"
          >
            Produits
          </TabsTrigger>
          <TabsTrigger
            value="carts"
            className="px-6 py-3 text-sm font-medium data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 rounded-none"
          >
            Paniers abandonnés
          </TabsTrigger>
          <TabsTrigger
            value="promotions"
            className="px-6 py-3 text-sm font-medium data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 rounded-none"
          >
            Promotions
          </TabsTrigger>
          <TabsTrigger
            value="customers"
            className="px-6 py-3 text-sm font-medium data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 rounded-none"
          >
            Clients
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="products" className="mt-0 p-0">
          {renderPopularProducts()}
        </TabsContent>
        
        <TabsContent value="carts" className="mt-0 p-0">
          {renderAbandonedCarts()}
        </TabsContent>
        
        <TabsContent value="promotions" className="mt-0 p-0">
          {renderPromotions()}
        </TabsContent>
        
        <TabsContent value="customers" className="mt-0 p-0">
          {renderCustomerAnalytics()}
        </TabsContent>
      </Tabs>
      
      {/* Modales */}
      {renderPromoModal()}
      {renderExportModal()}
      
      {/* Notification */}
      {notification.show && (
        <Notification 
          message={notification.message} 
          onClose={() => setNotification({ show: false, message: '' })} 
        />
      )}
    </>
  );
}
