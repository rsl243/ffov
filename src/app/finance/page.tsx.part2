  // Rendu du résumé financier
  const renderFinancialSummary = () => {
    return (
      <div className="p-6">
        {/* Période de statistiques */}
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold">Résumé financier</h2>
            <div className="flex space-x-2">
              <Button 
                variant={statsPeriod === 'month' ? "default" : "outline"}
                onClick={() => handlePeriodChange('month')}
              >
                Ce mois
              </Button>
              <Button 
                variant={statsPeriod === 'quarter' ? "default" : "outline"}
                onClick={() => handlePeriodChange('quarter')}
              >
                Ce trimestre
              </Button>
              <Button 
                variant={statsPeriod === 'year' ? "default" : "outline"}
                onClick={() => handlePeriodChange('year')}
              >
                Cette année
              </Button>
            </div>
          </div>
        </div>
        
        {/* Statistiques financières */}
        {loading.stats ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {Array(4).fill(0).map((_, index) => (
              <Card key={index} className="animate-pulse">
                <CardHeader className="pb-2">
                  <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                </CardHeader>
                <CardContent>
                  <div className="h-8 bg-gray-200 rounded w-1/2 mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/4"></div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Chiffre d'affaires</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatCurrency(financialStats.revenue.total)}</div>
                <p className={`text-xs flex items-center ${financialStats.revenue.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {financialStats.revenue.changePercent >= 0 ? (
                    <FiArrowUp className="mr-1" />
                  ) : (
                    <FiArrowDown className="mr-1" />
                  )}
                  {formatPercent(Math.abs(financialStats.revenue.changePercent))} par rapport à {
                    statsPeriod === 'month' ? 'la période précédente' :
                    statsPeriod === 'quarter' ? 'au trimestre précédent' :
                    'l\'année précédente'
                  }
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Ventes</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{financialStats.sales.total}</div>
                <p className={`text-xs flex items-center ${financialStats.sales.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {financialStats.sales.changePercent >= 0 ? (
                    <FiArrowUp className="mr-1" />
                  ) : (
                    <FiArrowDown className="mr-1" />
                  )}
                  {formatPercent(Math.abs(financialStats.sales.changePercent))} par rapport à {
                    statsPeriod === 'month' ? 'la période précédente' :
                    statsPeriod === 'quarter' ? 'au trimestre précédent' :
                    'l\'année précédente'
                  }
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Panier moyen</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatCurrency(financialStats.averageOrderValue.current)}</div>
                <p className={`text-xs flex items-center ${financialStats.averageOrderValue.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {financialStats.averageOrderValue.changePercent >= 0 ? (
                    <FiArrowUp className="mr-1" />
                  ) : (
                    <FiArrowDown className="mr-1" />
                  )}
                  {formatPercent(Math.abs(financialStats.averageOrderValue.changePercent))} par rapport à {
                    statsPeriod === 'month' ? 'la période précédente' :
                    statsPeriod === 'quarter' ? 'au trimestre précédent' :
                    'l\'année précédente'
                  }
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Remboursements</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatCurrency(financialStats.refunds.total)}</div>
                <p className={`text-xs flex items-center ${financialStats.refunds.changePercent <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {financialStats.refunds.changePercent <= 0 ? (
                    <FiArrowDown className="mr-1" />
                  ) : (
                    <FiArrowUp className="mr-1" />
                  )}
                  {formatPercent(Math.abs(financialStats.refunds.changePercent))} par rapport à {
                    statsPeriod === 'month' ? 'la période précédente' :
                    statsPeriod === 'quarter' ? 'au trimestre précédent' :
                    'l\'année précédente'
                  }
                </p>
              </CardContent>
            </Card>
          </div>
        )}
        
        {/* Paiements à venir */}
        <div className="mt-10">
          <h2 className="text-xl font-semibold mb-4">Paiements à venir</h2>
          {upcomingPayments.length === 0 ? (
            <Card>
              <CardContent className="p-6">
                <p className="text-gray-500">Aucun paiement à venir.</p>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Montant</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {upcomingPayments.map((payment) => (
                    <tr key={payment.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {format(new Date(payment.date), 'dd/MM/yyyy')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {payment.description}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {formatCurrency(payment.amount)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </Card>
          )}
        </div>
      </div>
    );
  };
  
  // Rendu des transactions
  const renderTransactions = () => {
    return (
      <div className="p-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h2 className="text-xl font-semibold mb-4 md:mb-0">Transactions</h2>
          
          <div className="flex flex-wrap gap-2">
            <div className="relative">
              <FiSearch className="absolute left-3 top-3 text-gray-400" />
              <Input
                type="text"
                placeholder="Rechercher..."
                className="pl-10 w-60"
                value={transactionFilters.searchTerm}
                onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
              />
            </div>
            
            <select 
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500"
              value={transactionFilters.type}
              onChange={(e) => handleFilterChange('type', e.target.value)}
            >
              <option value="all">Tous les types</option>
              <option value="payment">Paiements</option>
              <option value="refund">Remboursements</option>
              <option value="fee">Frais</option>
              <option value="payout">Versements</option>
            </select>
            
            <select 
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500"
              value={transactionFilters.status}
              onChange={(e) => handleFilterChange('status', e.target.value)}
            >
              <option value="all">Tous les statuts</option>
              <option value="completed">Complétés</option>
              <option value="pending">En attente</option>
              <option value="failed">Échoués</option>
            </select>
            
            <Button variant="outline">
              <FiDownload className="mr-2" />
              Exporter
            </Button>
          </div>
        </div>
        
        {/* Filtres de date */}
        <div className="mb-6 flex gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Date de début</label>
            <div className="relative">
              <FiCalendar className="absolute left-3 top-3 text-gray-400" />
              <Input
                type="date"
                className="pl-10"
                value={transactionFilters.startDate}
                onChange={(e) => handleFilterChange('startDate', e.target.value)}
              />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Date de fin</label>
            <div className="relative">
              <FiCalendar className="absolute left-3 top-3 text-gray-400" />
              <Input
                type="date"
                className="pl-10"
                value={transactionFilters.endDate}
                onChange={(e) => handleFilterChange('endDate', e.target.value)}
              />
            </div>
          </div>
        </div>
        
        {/* Tableau des transactions */}
        <Card>
          {loading.transactions ? (
            <div className="p-8 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
              <p className="mt-2 text-gray-600">Chargement des transactions...</p>
            </div>
          ) : transactions.length === 0 ? (
            <div className="p-8 text-center">
              <p className="text-gray-500">Aucune transaction trouvée.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Montant</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {transactions.map((transaction) => (
                    <tr key={transaction.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {format(new Date(transaction.date), 'dd/MM/yyyy')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {transaction.description}
                        {transaction.order && (
                          <span className="text-xs text-gray-500 block">
                            Commande #{transaction.order.id}
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {transaction.customer?.name || 'N/A'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Badge variant={
                          transaction.type === 'payment' ? 'default' :
                          transaction.type === 'refund' ? 'destructive' :
                          transaction.type === 'fee' ? 'secondary' :
                          'outline'
                        }>
                          {transaction.type === 'payment' ? 'Paiement' :
                           transaction.type === 'refund' ? 'Remboursement' :
                           transaction.type === 'fee' ? 'Frais' :
                           'Versement'}
                        </Badge>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <span className={
                          transaction.type === 'payment' ? 'text-green-600' :
                          transaction.type === 'refund' ? 'text-red-600' :
                          transaction.type === 'fee' ? 'text-orange-600' :
                          'text-blue-600'
                        }>
                          {transaction.type === 'refund' || transaction.type === 'fee' ? '-' : '+'}
                          {formatCurrency(transaction.amount)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Badge variant={
                          transaction.status === 'completed' ? 'default' :
                          transaction.status === 'pending' ? 'secondary' :
                          'destructive'
                        }>
                          {transaction.status === 'completed' ? 'Complété' :
                           transaction.status === 'pending' ? 'En attente' :
                           'Échoué'}
                        </Badge>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
          
          {/* Pagination */}
          {totalPages > 1 && (
            <div className="px-6 py-4 flex justify-between border-t">
              <Button 
                variant="outline" 
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
              >
                Précédent
              </Button>
              <div className="text-sm text-gray-700">
                Page {currentPage} sur {totalPages}
              </div>
              <Button 
                variant="outline" 
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
              >
                Suivant
              </Button>
            </div>
          )}
        </Card>
      </div>
    );
  };
